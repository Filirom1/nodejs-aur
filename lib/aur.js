// Generated by CoffeeScript 1.6.3
(function() {
  var FormData, aur, cheerio, config, defaultCb, fs, querystring, request, _;

  request = require('request');

  querystring = require('querystring');

  FormData = require('form-data');

  fs = require('fs');

  _ = require('underscore');

  config = require('./config');

  cheerio = require("cheerio");

  request = request.defaults({
    proxy: process.env['https_proxy'],
    jar: false
  });

  aur = module.exports = {
    info: function(name, options, cb) {
      var url;
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      cb || (cb = defaultCb);
      options = _.extend({}, config, options);
      url = options.url.base + options.url.info + name;
      return request({
        url: url
      }, function(err, resp, body) {
        var json;
        if (err) {
          return cb(err);
        }
        json = JSON.parse(body);
        if (json.type === 'error') {
          return cb(new Error(json.results));
        }
        return cb(null, json.results);
      });
    },
    publish: function(user, password, filePkg, category, options, cb) {
      var categories, categoryId;
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      cb || (cb = defaultCb);
      if (typeof category === 'object') {
        options = category;
        category = null;
      }
      category || (category = 'system');
      options = _.extend({}, config, options);
      categories = {
        daemons: 2,
        devel: 3,
        editors: 4,
        emulators: 5,
        games: 6,
        gnome: 7,
        i18n: 8,
        kde: 9,
        lib: 10,
        modules: 11,
        multimedia: 12,
        network: 13,
        office: 14,
        science: 15,
        system: 16,
        x11: 17,
        xfce: 18,
        kernels: 19
      };
      categoryId = categories[category];
      return this.login(user, password, options, function(err, cookie) {
        var form;
        if (err) {
          return cb(err);
        }
        form = new FormData();
        form.append('pkgsubmit', '1');
        form.append('token', cookie.replace('AURSID=', ''));
        form.append('category', categoryId + '');
        form.append('pfile', fs.createReadStream(filePkg));
        return form.getLength(function(err, length) {
          if (err) {
            return cb(err);
          }
          return form.pipe(request({
            method: 'POST',
            headers: form.getHeaders({
              'Cookie': cookie,
              'Content-Length': length
            }),
            url: options.url.base + (options.url.post || '')
          }, function(err, resp, data) {
            var $;
            if (err) {
              return cb(err);
            }
            $ = cheerio.load(data);
            if ($('.pkgoutput').text()) {
              return cb(new Error($(".pkgoutput").text()));
            }
            return cb(null, data);
          }));
        });
      });
    },
    login: function(user, password, options, cb) {
      var dataForm, url;
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      cb || (cb = defaultCb);
      options = _.extend({}, config, options);
      url = options.url.base + (options.url.login || '');
      dataForm = querystring.stringify({
        user: user,
        passwd: password
      });
      return request({
        url: url,
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': dataForm.length
        },
        body: dataForm
      }, function(err, resp) {
        var regex, setCookie, sid;
        if (err) {
          return cb(err);
        }
        if (!resp.headers['set-cookie']) {
          return cb(new Error('Wrong login or password'));
        }
        setCookie = resp.headers['set-cookie'];
        regex = /AURSID=\w*/;
        if (!regex.test(setCookie)) {
          return cb(new Error('No SessionID'));
        }
        sid = regex.exec(setCookie)[0];
        return cb(null, sid);
      });
    }
  };

  defaultCb = function(err, results) {
    if (err) {
      return console.error(err);
    }
    return console.log(results);
  };

}).call(this);
